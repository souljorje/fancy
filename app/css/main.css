@import 'fonts.css';
article,
details,
section,
summary,
aside,
main,
menu,
nav,
figcaption,
figure,
footer,
header,
hgroup {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: baseline;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
* {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  outline: none;
}
*::after,
*::before {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
body {
  margin: 0;
  font-family: 'Solomon Sans Normal';
}
.container {
  width: 1170px;
  padding: 0 15px;
  margin: 0 auto;
  zoom: 1;
}
.container:before,
.container:after {
  content: "";
  display: table;
}
.container:after {
  clear: both;
}
h1 {
  font-size: 2.625em;
}
h2 {
  font-size: 2em;
}
h3 {
  font-size: 1.625em;
}
h4 {
  font-size: 1.5em;
}
button {
  background-color: #ea8400;
  font-family: 'Solomon Sans Black';
  color: #fff;
  padding: 10px 35px;
  border: 0;
  border-radius: 3px;
  font-size: 1.375em;
  cursor: pointer;
  -webkit-transition: ease 0.2s all;
  transition: ease 0.2s all;
}
button:hover {
  background-color: #faa435;
}
button:active {
  -webkit-transform: scale(0.95);
  transform: scale(0.95);
}
header {
  min-height: 70px;
  background-image: -webkit-gradient(linear, left top, right top, color-stop(60%, #646d7a), color-stop(40%, #ea8400));
  background-image: linear-gradient(to right, #646d7a 60%, #ea8400 40%);
  text-align: center;
  position: fixed;
  top: 0;
  padding-top: 20px;
  color: #fff;
  width: 100%;
  z-index: 2;
}
header p {
  margin-top: 5px;
  margin-bottom: 5px;
}
header * {
  display: inline-block;
}
header .contacts p {
  margin-left: 15px;
  margin-right: 15px;
}
header .contacts a {
  color: #fff;
  text-decoration: none;
}
header .contacts a:hover {
  color: #ea8400;
}
header .social {
  font-weight: bold;
  margin-left: 40px;
}
header .social a img {
  vertical-align: middle;
  width: 50%;
}
main {
  background-image: url("../img/bg.png");
  min-height: 716px;
  background-size: cover;
  background-position: center;
  padding-top: 140px;
  padding-bottom: 60px;
  text-align: center;
}
main h1 {
  font-family: 'Solomon Sans Light';
  color: #fff;
}
main .offer {
  margin-top: 70px;
  background-color: #fff;
  border-radius: 50px 0 50px 0;
  max-width: 700px;
  display: inline-block;
  padding: 20px 100px;
}
main .offer h3 {
  font-family: 'Solomon Sans Black';
  margin: 0;
}
main .offer p {
  font-family: 'Solomon Sans Normal';
}
.work {
  padding: 30px 0;
  text-align: center;
}
.work h2 {
  margin-top: 0;
  font-family: 'Solomon Sans Black';
  text-align: center;
}
.work-item {
  display: -webkit-box !important;
  display: -ms-flexbox !important;
  display: flex !important;
  -ms-flex-pack: distribute;
  justify-content: space-around;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}
.work-item-images {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  width: 41.25%;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -ms-flex-pack: justify;
  -webkit-box-pack: justify;
          justify-content: space-between;
}
.work-item-images a img {
  width: 140px;
  margin-bottom: 10px;
}
.work-item-images a:first-child img {
  width: 100%;
}
.work-item-content {
  text-align: left;
  width: 50%;
}
.work-item-content p {
  font-size: 1.275em;
  margin-top: 0;
}
.work-item-content > p b {
  font-family: 'Solomon Sans Black';
}
.work-item-cost {
  border: 2px solid #e3e5e6;
  color: #ea8400;
  padding: 15px;
}
.work-item-cost p:after {
  content: '';
  width: 100%;
  height: 1px;
  background-color: #000;
  display: block;
}
.work-item-cost b {
  float: right;
  font-family: 'Solomon Sans Black';
}
.works {
  margin-top: 20px;
}
.works p {
  display: inline-block;
  vertical-align: top;
  font-family: 'Solomon Sans Black';
}
.works ul {
  display: inline-block;
  list-style-type: none;
  margin-top: 5px;
}
.works ul li:before {
  content: '';
  width: 5px;
  height: 5px;
  border-radius: 5px;
  display: inline-block;
  vertical-align: middle;
  margin-bottom: 2px;
  margin-right: 5px;
  background-color: #ea8400;
}
.cost {
  text-align: center;
  padding: 30px 0;
}
.cost h2 {
  font-family: 'Solomon Sans Black';
}
.cost p {
  font-size: 1.275em;
}
.cost-content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: distribute;
  justify-content: space-around;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}
.cost-item-wrap {
  max-width: 320px;
  display: inline-block;
  margin-bottom: 30px;
}
.cost-item-wrap button {
  width: 100%;
  height: 97px;
  padding-bottom: 50px;
  border-radius: 0;
  background-color: transparent;
  background-image: url("../img/icons/button.png");
  background-position: center;
}
.cost-item-wrap button:hover {
  background-image: url("../img/icons/button-hov.png");
}
.cost-item-wrap:nth-child(2) .cost-item span {
  background-position: -53px 12px;
}
.cost-item-wrap:nth-child(3) .cost-item span {
  background-position: -107px 12px;
}
.cost-item {
  min-height: 590px;
  padding: 20px;
  padding-bottom: 40px;
  -webkit-box-shadow: 0 0 5px rgba(0,0,0,0.16);
  box-shadow: 0 0 5px rgba(0,0,0,0.16);
  position: relative;
}
.cost-item span {
  width: 70px;
  height: 70px;
  background-image: url("../img/icons/iconset.png");
  background-color: #fff;
  background-repeat: no-repeat;
  background-position: 4px 12px;
  display: inline-block;
  border: 2px solid #95989a;
  border-radius: 50px;
  position: relative;
}
.cost-item span:after {
  content: '';
  height: 59px;
  width: 320px;
  left: -127px;
  z-index: -1;
  bottom: -24px;
  position: absolute;
  display: inline-block;
  background-color: #f3f3f3;
}
.cost-item ol {
  text-align: left;
  padding-left: 18px;
}
.cost-item p {
  position: absolute;
  bottom: 0;
  font-size: 1em;
  font-weight: bold;
  color: #ea8400;
  padding-right: 15px;
}
.form-popup {
  position: relative;
  background: #fff;
  padding: 20px;
  width: auto;
  max-width: 400px;
  margin: 20px auto;
}
.form-popup .form-group {
  margin-bottom: 15px;
}
.form-popup .form-group input {
  display: block;
  margin: auto;
  width: 100%;
}
.mfp-close {
  cursor: pointer !important;
  margin-right: 0;
  -webkit-transform: none !important;
  transform: none !important;
}
.mfp-close:hover {
  background-color: transparent;
}
.slick-prev:before,
.slick-next:before {
  color: #ea8400;
  font-size: 32px;
}
.slick-prev,
.slick-next {
  -webkit-transform: none;
  transform: none;
}
@media only screen and (max-width: 1200px) {
  .container {
    width: 970px;
  }
  header {
    background-image: -webkit-gradient(linear, left top, right top, color-stop(63%, #646d7a), color-stop(37%, #ea8400));
    background-image: linear-gradient(to right, #646d7a 63%, #ea8400 37%);
  }
}
@media only screen and (max-width: 992px) {
  .container {
    width: 750px;
  }
  header {
    background-image: -webkit-gradient(linear, left top, right top, color-stop(68%, #646d7a), color-stop(32%, #ea8400));
    background-image: linear-gradient(to right, #646d7a 68%, #ea8400 32%);
  }
  .work p {
    font-size: 1.0625em;
  }
  .work .container {
    padding: 0 40px;
  }
  .works p {
    margin-bottom: 5px;
  }
  .works ul {
    padding: 0;
    margin-top: 0;
  }
}
@media only screen and (max-width: 767px) {
  .container {
    width: 100%;
  }
  .work-item-images a img {
    width: 140px;
    height: 125px;
  }
  .work-item-images a:first-child img {
    width: 140px;
    height: 125px;
  }
  .work-item-cost b {
    float: none;
    display: inline-block;
  }
}
@media only screen and (max-width: 593px) {
  header {
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(68%, #646d7a), color-stop(32%, #ea8400));
    background-image: linear-gradient(to bottom, #646d7a 68%, #ea8400 32%);
  }
}
@media only screen and (max-width: 480px) {
  main .offer {
    padding: 20px;
  }
  .work-item-images {
    -ms-flex-direction: column;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
            flex-direction: column;
    -ms-flex-pack: start;
    -webkit-box-pack: start;
            justify-content: start;
  }
}
@media only screen and (max-width: 447px) {
  header {
    padding-top: 5px;
  }
  .work .container {
    padding: 0 15px;
  }
  .work-item-images {
    width: auto;
    -ms-flex-direction: row;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
            flex-direction: row;
    -ms-flex-pack: distribute;
    justify-content: space-around;
    margin-bottom: 10px;
  }
  .work-item-content {
    width: auto;
    display: -webkit-inline-box;
    display: -ms-inline-flexbox;
    display: inline-flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
  }
  .work-item-cost {
    -ms-flex-order: 2;
    -webkit-box-ordinal-group: 3;
            order: 2;
  }
  .works {
    margin-top: 0;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
